# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
worker_password = os.environ.get('BUILDBOT_ENV_WORKER_PASS','');
class Work:
  def __init__(self,is_win,name,shellname):
    self.is_win = is_win
    if is_win:
      self.path_sep = "\\"
    else:
      self.path_sep = "/"
    self.name = name
    self.shellname = shellname
    self.password = worker_password

workers={}
if worker_password:
  workers["worker-example"]=Work(False,"worker-example","bbtbuild.sh")
  workers["worker-debian"]=Work(False,"worker-debian","bbtbuild.sh")
  workers["worker-alpine"]=Work(False,"worker-alpine","bbtbuild.sh")
  workers["worker-mac"]=Work(False,"worker-mac","bbtbuild.sh")
  workers["worker-win"]=Work(False,"worker-win","bbtbuild.bat")

c['workers'] =  []
for key,worker_ in workers.items():
  c['workers'].append(worker.Worker(worker_.name,worker_.password))

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/buildbot/pyflakes.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.
builder_bychange=[]
builder_byforce=[]
c['builders'] = []

class BuildBotCreator:
  def __init__(self):
    self.build_cmd = None
    self.workers = []
    self.buildname = None
    self.repourl = None
    self.shellpath = None
  def setShellPath(self, shellpath):
    self.shellpath = shellpath
  def setBuildName(self,buildname):
    self.buildname = buildname
  def setRepUrl(self,repourl):
    self.repourl = repourl
  def AddWorker(self,worker):
    self.workers.append(worker)
  def AddWorkers(self,workers):
    self.workers += workers.values()
  def DoCreateForWorker(self, worker):
    buildername = self.buildname + "-" + worker.name
    the_shellname = self.shellpath + worker.path_sep + worker.shellname if self.shellpath else worker.shellname
    factory = util.BuildFactory()
    factory.addStep(steps.Git(repourl=self.repourl, mode='incremental'))
    factory.addStep(steps.ShellCommand(command=[the_shellname]))
    c['builders'].append(util.BuilderConfig(name=buildername,workernames=[worker.name], factory=factory))
    builder_bychange.append(buildername)
    builder_byforce.append(buildername)   
  def DoCreate(self):
    for worker in self.workers:
      self.DoCreateForWorker(worker)


a = BuildBotCreator()
a.AddWorkers(workers)
a.setBuildName("envcheck")
a.setRepUrl('http://github.com/lrobot/envcheck.git')
a.DoCreate()



a = BuildBotCreator()
a.AddWorker(workers["worker-mac"])
a.setBuildName("openwrt-openconnect")
a.setRepUrl('https://github.com/openwrt/packages/tree/master/net/openconnect')
a.DoCreate()


############
c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=builder_bychange))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=builder_byforce))
####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "HomeBuildBot"
c['titleURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
